!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
FRIEND_H	Friend.h	2;"	d
Friend	Friend.h	/^class Friend$/;"	c
Friend	Friend.cpp	/^Friend::Friend()$/;"	f	class:Friend
GROUPNAME_MAX_LEN	Group.h	10;"	d
GROUP_H	Group.h	2;"	d
GROUP_USER_STAT_BANPOST	Usergroupmap.h	/^	GROUP_USER_STAT_NORMAL, GROUP_USER_STAT_BANPOST$/;"	e	enum:UserGroupMapStatus
GROUP_USER_STAT_NORMAL	Usergroupmap.h	/^	GROUP_USER_STAT_NORMAL, GROUP_USER_STAT_BANPOST$/;"	e	enum:UserGroupMapStatus
Group	Group.h	/^class Group$/;"	c
Group	Group.cpp	/^Group::Group()$/;"	f	class:Group
PERM_ADMI	Usergroupmap.h	/^	PERM_USER, PERM_ADMI$/;"	e	enum:UserGroupMapPermission
PERM_USER	Usergroupmap.h	/^	PERM_USER, PERM_ADMI$/;"	e	enum:UserGroupMapPermission
USERGROUPMAP_H	Usergroupmap.h	2;"	d
USER_H	User.h	2;"	d
USER_STAT_HIDE	User.h	/^	USER_STAT_ONLINE, USER_STAT_OFFLINE, USER_STAT_HIDE$/;"	e	enum:UserStatus
USER_STAT_OFFLINE	User.h	/^	USER_STAT_ONLINE, USER_STAT_OFFLINE, USER_STAT_HIDE$/;"	e	enum:UserStatus
USER_STAT_ONLINE	User.h	/^	USER_STAT_ONLINE, USER_STAT_OFFLINE, USER_STAT_HIDE$/;"	e	enum:UserStatus
UserGroupMapPermission	Usergroupmap.h	/^enum UserGroupMapPermission$/;"	g
UserGroupMapStatus	Usergroupmap.h	/^enum UserGroupMapStatus$/;"	g
UserGroupMap	Usergroupmap.h	/^class UserGroupMap$/;"	c
UserGroupMap	Usergroupmap.cpp	/^UserGroupMap::UserGroupMap()$/;"	f	class:UserGroupMap
UserStatus	User.h	/^enum UserStatus$/;"	g
User	User.h	/^class User$/;"	c
User	User.cpp	/^User::User()$/;"	f	class:User
getGid	Usergroupmap.cpp	/^uint32_t UserGroupMap::getGid() const$/;"	f	class:UserGroupMap
getId	Friend.cpp	/^uint32_t Friend::getId() const$/;"	f	class:Friend
getId	Group.cpp	/^uint32_t Group::getId() const$/;"	f	class:Group
getId	User.cpp	/^uint32_t User::getId() const$/;"	f	class:User
getId	Usergroupmap.cpp	/^uint32_t UserGroupMap::getId() const$/;"	f	class:UserGroupMap
getMobile	User.cpp	/^string User::getMobile() const$/;"	f	class:User
getName	Group.cpp	/^string Group::getName() const$/;"	f	class:Group
getPassword	User.cpp	/^string User::getPassword() const$/;"	f	class:User
getPermission	Usergroupmap.cpp	/^uint32_t UserGroupMap::getPermission() const$/;"	f	class:UserGroupMap
getStatus	User.cpp	/^uint32_t User::getStatus() const$/;"	f	class:User
getStatus	Usergroupmap.cpp	/^uint32_t UserGroupMap::getStatus() const$/;"	f	class:UserGroupMap
getUid1	Friend.cpp	/^uint32_t Friend::getUid1() const$/;"	f	class:Friend
getUid2	Friend.cpp	/^uint32_t Friend::getUid2() const$/;"	f	class:Friend
getUid	Usergroupmap.cpp	/^uint32_t UserGroupMap::getUid() const$/;"	f	class:UserGroupMap
getUsername	User.cpp	/^string User::getUsername() const$/;"	f	class:User
gid	Usergroupmap.h	/^	uint32_t gid;$/;"	m	class:UserGroupMap
id	Friend.h	/^	uint32_t id;$/;"	m	class:Friend
id	Group.h	/^	uint32_t id;$/;"	m	class:Group
id	User.h	/^	uint32_t id;$/;"	m	class:User
id	Usergroupmap.h	/^	uint32_t id;$/;"	m	class:UserGroupMap
mobile	User.h	/^	string mobile;$/;"	m	class:User
name	Group.h	/^	string name;$/;"	m	class:Group
password	User.h	/^	string password;$/;"	m	class:User
permission	Usergroupmap.h	/^	uint32_t permission;$/;"	m	class:UserGroupMap
setGid	Usergroupmap.cpp	/^void UserGroupMap::setGid(const uint32_t &value)$/;"	f	class:UserGroupMap
setId	Friend.cpp	/^void Friend::setId(const uint32_t &value)$/;"	f	class:Friend
setId	Group.cpp	/^void Group::setId(const uint32_t &value)$/;"	f	class:Group
setId	User.cpp	/^void User::setId(const uint32_t &value)$/;"	f	class:User
setId	Usergroupmap.cpp	/^void UserGroupMap::setId(const uint32_t &value)$/;"	f	class:UserGroupMap
setMobile	User.cpp	/^void User::setMobile(const string &value)$/;"	f	class:User
setName	Group.cpp	/^void Group::setName(const string &value)$/;"	f	class:Group
setPassword	User.cpp	/^void User::setPassword(const string &value)$/;"	f	class:User
setPermission	Usergroupmap.cpp	/^void UserGroupMap::setPermission(const uint32_t &value)$/;"	f	class:UserGroupMap
setStatus	User.cpp	/^void User::setStatus(const uint32_t &value)$/;"	f	class:User
setStatus	Usergroupmap.cpp	/^void UserGroupMap::setStatus(const uint32_t &value)$/;"	f	class:UserGroupMap
setUid1	Friend.cpp	/^void Friend::setUid1(const uint32_t &value)$/;"	f	class:Friend
setUid2	Friend.cpp	/^void Friend::setUid2(const uint32_t &value)$/;"	f	class:Friend
setUid	Usergroupmap.cpp	/^void UserGroupMap::setUid(const uint32_t &value)$/;"	f	class:UserGroupMap
setUsername	User.cpp	/^void User::setUsername(const string &value)$/;"	f	class:User
status	User.h	/^	uint32_t status;$/;"	m	class:User
status	Usergroupmap.h	/^	uint32_t status;$/;"	m	class:UserGroupMap
toString	Friend.cpp	/^string Friend::toString() const$/;"	f	class:Friend
toString	Group.cpp	/^string Group::toString() const$/;"	f	class:Group
toString	User.cpp	/^string User::toString() const$/;"	f	class:User
toString	Usergroupmap.cpp	/^string UserGroupMap::toString() const$/;"	f	class:UserGroupMap
uid1	Friend.h	/^	uint32_t uid1;$/;"	m	class:Friend
uid2	Friend.h	/^	uint32_t uid2;$/;"	m	class:Friend
uid	Usergroupmap.h	/^	uint32_t uid;$/;"	m	class:UserGroupMap
username	User.h	/^	string username;$/;"	m	class:User
